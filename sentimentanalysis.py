# -*- coding: utf-8 -*-
"""SentimentAnalysis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iynk4eOtlKQbq-ANQZUJutkhpmRX9yyq
"""

import pandas as pd
data=pd.read_csv("/content/Train - Email Classification.csv")
df=pd.DataFrame(data)
print(df.head())

import gensim
from gensim.parsing.preprocessing import preprocess_string
from gensim.parsing.preprocessing import strip_punctuation
from gensim.parsing.preprocessing import strip_non_alphanum
from gensim.parsing.preprocessing import split_alphanum
from gensim.parsing.preprocessing import strip_numeric
CUSTOM_FILTERS = [lambda x: x.lower(),strip_punctuation,strip_non_alphanum,split_alphanum,strip_numeric]
df['tok2_stnan']=[preprocess_string(sentence, CUSTOM_FILTERS) for sentence in df['pre_text']]
print(df.head())
df['tok2_stnan2']=[preprocess_string(sentence, CUSTOM_FILTERS) for sentence in df['post_text']]
newDf=pd.DataFrame(["id","tok2_stnan","tok2_stnan2"])
print(newDf)

enquiry_keywords=["enquire","wanted to know"]
concern_keyowrds=["concern","concerned","worried"]
dissatisfaction_keywords=["unhappy","not satisfied"]
escalation_keywords=["heigher management"]
satisfaction_keyword=["happy","glad","satisfied"]

import nltk
from nltk.sentiment import SentimentIntensityAnalyzer
import pandas as pd

# Download necessary NLTK resources
nltk.download('vader_lexicon')

# Load your dataset into a DataFrame (replace 'your_dataset.csv' with your actual file)
df = pd.read_csv('/content/Train - Email Classification.csv')

# Initialize SentimentIntensityAnalyzer
sid = SentimentIntensityAnalyzer()

# Function to map sentiment scores to categories
def map_sentiment(score):
    if score >= 0.2:
        return 'satisfaction'
    elif score <= -0.2:
        return 'dissatisfied'
    else:
        return 'concern'

# Function to perform sentiment analysis on each text
def analyze_sentiment(text):
    scores = sid.polarity_scores(text)
    compound_score = scores['compound']
    return map_sentiment(compound_score)

# Apply sentiment analysis to each row in the DataFrame
df['sentiment'] = df['pre_text'].apply(analyze_sentiment)
df['sentiment'] = df['post_text'].apply(analyze_sentiment)

# If you have additional attributes like table content, you can include them as well

# Display the DataFrame with sentiment labels
print(df['sentiment'])